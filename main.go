package main

import (
	"context"
	"encoding/json"
	"flag"
	"fmt"
	"io/ioutil"
	"os"

	"cloud.google.com/go/bigquery"
)

const (
	optionNameKeyFile                   = "keyfile"
	envNameGoogleApplicationCredentials = "GOOGLE_APPLICATION_CREDENTIALS"
)

var (
	vKeyFile string
	vPath    string
)

func init() {
	flag.StringVar(&vKeyFile, optionNameKeyFile, "", "path to service account json key file")
	flag.StringVar(&vPath, "path", "", "path to output the generated code")
	flag.Parse()
}

const (
	goFileContentHeader = `// Code generated by bqtableschema.go; DO NOT EDIT.
//go:generate go run bqtableschema.go

package bqtableschema
`
)

func main() {
	ctx := context.Background()

	fmt.Printf("%s\n", goFileContentHeader)

	c, err := bigquery.NewClient(ctx, "", nil)
	_, _ = c, err
}

type googleApplicationCredentials struct {
	Type                    string `json:"type"`
	ProjectID               string `json:"project_id"`
	PrivateKeyID            string `json:"private_key_id"`
	PrivateKey              string `json:"private_key"`
	ClientEmail             string `json:"client_email"`
	ClientID                string `json:"client_id"`
	AuthURI                 string `json:"auth_uri"`
	TokenURI                string `json:"token_uri"`
	AuthProviderX509CertURL string `json:"auth_provider_x509_cert_url"`
	ClientX509CertURL       string `json:"client_x509_cert_url"`
}

func getGoogleProject() (string, error) {

	path := os.Getenv(envNameGoogleApplicationCredentials)

	switch {
	case path != "":
		return getGoogleProjectByGoogleApplicationCredentials(path)
	default:
		return "", fmt.Errorf("getGoogleProject: set option")
	}

}

func getGoogleProjectByGoogleApplicationCredentials(path string) (string, error) {
	file, err := os.Open(path)
	if err != nil {
		return "", fmt.Errorf("getGoogleProject: %w", err)
	}

	content, err := ioutil.ReadAll(file)
	if err != nil {
		return "", fmt.Errorf("getGoogleProject: %w", err)
	}

	cred := googleApplicationCredentials{}
	if err := json.Unmarshal(content, &cred); err != nil {
		return "", fmt.Errorf("getGoogleProject: %w", err)
	}

	return cred.ProjectID, nil
}

// ResolveEnvs resolves environment variables from the arguments passed as environment variable names.
func ResolveEnvs(keys ...string) (map[string]string, error) {
	envs := map[string]string{}

	for _, key := range keys {
		envs[key] = os.Getenv(key)
		if envs[key] == "" {
			return nil, fmt.Errorf("environment variable %s is empty", key)
		}
	}

	return envs, nil
}
